{"version":3,"sources":["logo.svg","axios.js","components/candidatelist.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","axiosInstance","Axios","create","baseURL","timeout","Votemodal","props","useState","dis","setdis","dd","details","Modal","isOpen","isopen","ModalHeader","toggle","name","ModalBody","challegescount","expertiselevel","votes","undefined","localStorage","getItem","disabled","onClick","cid","_id","post","then","res","status","alert","setItem","catch","err","console","log","MainComponent","modalopen","modaltoggle","contenstants","setcontenstants","isloaded","setisloaded","modalinfo","setmodalinfo","useEffect","get","data","openUserVote","id","a","className","map","index","key","href","e","preventDefault","target","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"6IAAAA,EAAOC,QAAU,IAA0B,kC,2KCsB9BC,G,KAAgBC,IAAMC,OAAO,CACtCC,QAAQ,GAAD,OApBY,wBAoBZ,KACPC,QAAS,O,wBC+DPC,EAAY,SAACC,GAAW,IAAD,EACHC,oBAAS,GADN,mBAClBC,EADkB,KACbC,EADa,KAEnBC,EAAKJ,EAAMK,QAmBjB,OACI,kBAACC,EAAA,EAAD,CAAOC,OAAQP,EAAMQ,QACjB,kBAACC,EAAA,EAAD,CAAaC,OAAQV,EAAMU,QAASN,EAAGO,MACvC,kBAACC,EAAA,EAAD,KACI,4BACI,sCAAYR,EAAGO,MACf,uDAA6BP,EAAGS,gBAChC,yCAAeT,EAAGU,gBAClB,6CAAmBV,EAAGW,YAEkBC,GAAnCC,aAAaC,QAAQ,YAA8D,MAAnCD,aAAaC,QAAQ,YAAuBhB,EAQzF,4BAAQiB,SAAUjB,GAAlB,yBALA,4BACIkB,QAhCZ,WACZ,IAAMC,EAAMjB,EAAGkB,IACf5B,EAAc6B,KAAd,kBAA8BF,IAAOG,MAAK,SAAAC,GACpB,KAAdA,EAAIC,SACJC,MAAM,QACNV,aAAaW,QAAQ,UAAW,QAChCzB,GAAQD,OAMX2B,OAAM,SAAAC,GACHC,QAAQC,IAAIF,OAoBIX,SAAUjB,GAFd,YAcb+B,EApIO,SAACjC,GAAW,IAAD,EAEIC,oBAAS,GAFb,mBAEtBiC,EAFsB,KAEXC,EAFW,OAGWlC,mBAAS,IAHpB,mBAGtBmC,EAHsB,KAGRC,EAHQ,OAIGpC,oBAAS,GAJZ,mBAItBqC,EAJsB,KAIZC,EAJY,OAKKtC,mBAAS,IALd,mBAKtBuC,EALsB,KAKXC,EALW,KAO7BC,qBAAU,WACNhD,EAAciD,IAAI,mBAAmBnB,MAAK,SAAAC,GACpB,KAAdA,EAAIC,OACCY,IACDD,EAAgBZ,EAAImB,MACpBL,GAAY,IAIhBZ,MAAM,aAGTE,OAAM,SAAAC,GACHC,QAAQC,IAAIF,QAErB,CAACM,EAAcE,IAClB,IAAMO,EAAY,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sDACjBrD,EAAciD,IAAd,8BAAyCG,IAAMtB,MAAK,SAAAC,GAChD,GAAkB,KAAdA,EAAIC,OAAR,CACI,IAAMrB,EAAUoB,EAAImB,KAChBvC,IACAoC,EAAapC,GACb8B,GAAY,QAOnBN,OAAM,SAAAC,GACHC,QAAQC,IAAIF,MAdH,2CAAH,sDAmClB,OACI,oCAEQQ,EAEI,oCACI,yBAAKU,UAAU,YACX,4BACgBZ,EAvBvBa,KACT,SAACtC,EAAMuC,GACH,OACI,wBAAIJ,GAAInC,EAAKA,KAAO,KAAMwC,IAAG,cAASxC,EAAKA,OACvC,uBAAGyC,KAAM,IAAMzC,EAAKA,KAAO,KACvBmC,GAAInC,EAAKW,IACTF,QAAS,SAAAiC,GACLA,EAAEC,iBACFT,EAAaQ,EAAEE,OAAOT,MACtBnC,EAAKA,KALb,IAKoBA,EAAKW,WAiBzB,kBAAC,EAAD,CACId,OAAQ0B,EACRxB,OAAQ,WACJyB,GAAaD,IAEjB7B,QAASmC,KAIjB,yCCpELgB,MARf,WACE,OACE,yBAAKR,UAAU,OACb,kBAAC,EAAD,QCIcS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7C,MAAK,SAAA8C,GACJA,EAAaC,gBAEd1C,OAAM,SAAA2C,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.ac1a89bf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import Axios from 'axios'\nimport Cookies from 'js-cookie'\n\nexport const baseurl = \"http://localhost:3000\"\n\nconst getAuthtokenfromcookie = ()=>{\n    const ck = Cookies.getJSON(\"jwt\");\n    if(ck){\n        return `Bearer ${ck}`;\n    }\n    else{const getAuthtokenfromcookie = ()=>{\n        const ck = Cookies.getJSON(\"jwt\");\n        if(ck){\n            return `Bearer ${ck}`;\n        }\n        else{\n            return '';\n        }\n     }\n        return '';\n    }\n }\nexport const axiosInstance = Axios.create({\n    baseURL: `${baseurl}/`,\n    timeout: 5000,\n    // headers: {\n    //     \"authorization\":getAuthtokenfromcookie()\n    // }\n  });\nexport const setAuthtokentoCookie = (authtoken)=>{\n    Cookies.set(\"jwt\",authtoken,{expires:1});\n}\n","import React, { useState, useEffect } from 'react';\nimport { axiosInstance } from '../axios';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nconst MainComponent = (props) => {\n\n    const [modalopen, modaltoggle] = useState(false);\n    const [contenstants, setcontenstants] = useState({});\n    const [isloaded, setisloaded] = useState(false)\n    const [modalinfo, setmodalinfo] = useState({});\n\n    useEffect(() => {\n        axiosInstance.get('listcontestants').then(res => {\n            if (res.status == 200) {\n                if (!isloaded) {\n                    setcontenstants(res.data)\n                    setisloaded(true)\n                }\n            }\n            else {\n                alert(\"reload\")\n            }\n        })\n            .catch(err => {\n                console.log(err);\n            })\n    }, [contenstants, isloaded])\n    const openUserVote = async (id) => {\n        axiosInstance.get(`getCandidateDetails/${id}`).then(res => {\n            if (res.status == 200) {\n                const details = res.data\n                if (details) {\n                    setmodalinfo(details)\n                    modaltoggle(true)\n                }\n            }\n            else {\n                return undefined;\n            }\n        })\n            .catch(err => {\n                console.log(err);\n                return undefined;\n            })\n\n    }\n    function renderName(names) {\n        return names.map(\n            (name, index) => {\n                return (\n                    <li id={name.name + \"xx\"} key={`list${name.name}`}>\n                        <a href={\"#\" + name.name + \"xx\"}\n                            id={name._id}\n                            onClick={e => {\n                                e.preventDefault()\n                                openUserVote(e.target.id);\n                            }}>{name.name} {name._id}</a>\n                    </li>\n                )\n            }\n        )\n    }\n    return (\n        <>\n            {\n                isloaded ?\n\n                    <>\n                        <div className=\"main-div\">\n                            <ol>\n                                {renderName(contenstants)}\n                            </ol>\n                        </div>\n                        <Votemodal\n                            isopen={modalopen}\n                            toggle={() => {\n                                modaltoggle(!modalopen)\n                            }}\n                            details={modalinfo}\n                        />\n                    </>\n                    :\n                    <h1>Loading</h1>\n            }\n        </>\n    )\n}\n\nconst Votemodal = (props) => {\n    const [dis, setdis] = useState(false)\n    const dd = props.details;\n    const addVote = () => {\n        const cid = dd._id;\n        axiosInstance.post(`addvote/${cid}`).then(res => {\n            if (res.status == 200) {\n                alert(\"done\");\n                localStorage.setItem(\"isvoted\", \"true\");\n                setdis(!dis)\n            }\n            else {\n                return undefined;\n            }\n        })\n            .catch(err => {\n                console.log(err);\n                return undefined;\n            })\n\n    }\n    return (\n        <Modal isOpen={props.isopen}>\n            <ModalHeader toggle={props.toggle}>{dd.name}</ModalHeader>\n            <ModalBody>\n                <ul>\n                    <li>name : {dd.name}</li>\n                    <li>challenges participated {dd.challegescount}</li>\n                    <li>Expertice {dd.expertiselevel}</li>\n                    <li>Current Votes {dd.votes}</li>\n                    {\n                        (localStorage.getItem(\"isvoted\") == undefined || localStorage.getItem(\"isvoted\") == null || !dis)\n                            ?\n\n                            <button\n                                onClick={addVote}\n                                disabled={dis}\n                            >Vote</button>\n                            :\n                            <button disabled={dis}>You had Voted Already</button>\n                    }\n                </ul>\n            </ModalBody>\n        </Modal>\n    )\n}\n\n\nexport default MainComponent","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport MainComponent from './components/candidatelist'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainComponent/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}